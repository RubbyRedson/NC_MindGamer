//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : AbstractArbiter.java
//  @ Date : 29.10.2013
//  @ Author : 
//
//

package ru.netcracker.education.abstract_classes;


import ru.netcracker.education.Cell;

import java.util.List;
import java.util.concurrent.TimeUnit;

public abstract class AbstractArbiter {
    protected static int RangeHorizontalLow = Integer.MIN_VALUE;
    protected static int RangeHorizontalHigh = Integer.MAX_VALUE;
    protected static int RangeVerticalLow = Integer.MIN_VALUE;
    protected static int RangeVerticalHigh = Integer.MAX_VALUE;
    //private static final int NUMBER_OF_CHANGES_AT_ONCE = 1; //not needed
    protected static final long TIMELIMIT = 1000000;
    protected static final TimeUnit TU = TimeUnit.SECONDS;
    //public Object Scores;
    protected AbstractField PlayingField;
    protected List<AbstractGamer> playerList;
    protected AbstractGamer player1;
    protected AbstractGamer player2;

    public abstract boolean hasWinner();
    
    public abstract void arrangeMatch();
    
    public boolean checkValidityOfMove(Cell move) throws Exception {
        if (move.getVertical() < RangeVerticalLow || move.getVertical() > RangeVerticalHigh ||
                move.getHorizontal() < RangeHorizontalLow || move.getHorizontal() > RangeHorizontalHigh ||
                this.PlayingField.getField().getCells()[move.getHorizontal()][move.getVertical()].isFilled()) {   //valid coords
            //and if the named cell isn't already filled, the game is Tic-Tac-Toe
                             throw new IllegalArgumentException("Wrong move from player!");
        }
        return true;
    }

    public abstract void updateField(Cell move);
}
